set nocompatible
filetype off
" set rtp+=~/.config/dotfiles/vim/bundle/Vundle.vim

" change cursor shape based on insert/normal mode in iterm
" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" let &t_SR = "\<Esc>]50;CursorShape=2\x7"
" let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" for tmux:
" let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
" let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
" let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" PlugInstall   or  PlugUpdate

call plug#begin()
Plug 'janko-m/vim-test'
Plug 'VundleVim/Vundle.vim'

Plug 'tpope/vim-fireplace'

Plug 'tpope/vim-abolish'
Plug 'rking/ag.vim'
" Plug 'mileszs/ack.vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
" Plug 'nviennot/snipmate.vim'
" Plug 'nviennot/vim-armasm'
Plug 'ton/vim-bufsurf'
Plug 'kchmck/vim-coffee-script'
Plug 'ap/vim-css-color'
" Plug 'skammer/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-cucumber'
" Plug 'elixir-lang/vim-elixir'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Gist.vim'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-haml'
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'mxw/vim-jsx'
Plug 'othree/yajs.vim'
Plug 'vim-scripts/L9'
Plug 'groenewege/vim-less'
Plug 'ujihisa/vim-markdown'
Plug 'vim-scripts/matchit.zip'
Plug 'nviennot/molokai'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'nviennot/vim-powerline'
Plug 'tomtom/quickfixsigns_vim'
Plug 'tpope/vim-rails'
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-repeat'
Plug 'vim-ruby/vim-ruby'
Plug 'ecomba/vim-ruby-refactoring'
" Plug 'sidnair/scala-vim'
Plug 'ervandew/screen'
"Plug 'nviennot/vim-config/tree/master/bundle/scribe/syntax'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-speeddating'
Plug 'ervandew/supertab'
Plug 'tpope/vim-surround'
Plug 'scrooloose/syntastic'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-unimpaired'
Plug 'mattn/webapi-vim'
Plug 'sukima/xmledit'
Plug 'vim-scripts/YankRing.vim'

Plug 'heartsentwined/vim-emblem'
Plug 'jiangmiao/auto-pairs'

Plug 'mattn/emmet-vim'

call plug#end()

set rtp+=~/.config/dotfiles/vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'


Plugin 'tpope/vim-abolish'
Plugin 'rking/ag.vim'
" Plugin 'mileszs/ack.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
" Plugin 'nviennot/snipmate.vim'
" Plugin 'nviennot/vim-armasm'
Plugin 'ton/vim-bufsurf'
Plugin 'kchmck/vim-coffee-script'
Plugin 'ap/vim-css-color'
" Plugin 'skammer/vim-css-color'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-cucumber'
" Plugin 'elixir-lang/vim-elixir'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/Gist.vim'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-haml'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 'mxw/vim-jsx'
Plugin 'othree/yajs.vim'
Plugin 'vim-scripts/L9'
Plugin 'groenewege/vim-less'
Plugin 'ujihisa/vim-markdown'
Plugin 'vim-scripts/matchit.zip'
Plugin 'nviennot/molokai'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'nviennot/vim-powerline'
Plugin 'tomtom/quickfixsigns_vim'
Plugin 'tpope/vim-rails'
Plugin 'luochen1990/rainbow'
Plugin 'tpope/vim-repeat'
Plugin 'vim-ruby/vim-ruby'
Plugin 'ecomba/vim-ruby-refactoring'
" Plugin 'sidnair/scala-vim'
Plugin 'ervandew/screen'
"Plugin 'nviennot/vim-config/tree/master/bundle/scribe/syntax'
Plugin 'slim-template/vim-slim'
Plugin 'tpope/vim-speeddating'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-unimpaired'
Plugin 'mattn/webapi-vim'
Plugin 'sukima/xmledit'
Plugin 'vim-scripts/YankRing.vim'

Plugin 'heartsentwined/vim-emblem'


"https://github.com/tpope/vim-abolish
"https://github.com/mileszs/ack.vim
"https://github.com/MarcWeber/vim-addon-mw-utils
"https://github.com/nviennot/vim-armasm
"https://github.com/ton/vim-bufsurf
"https://github.com/kchmck/vim-coffee-script
"https://github.com/skammer/vim-css-color
"https://github.com/hail2u/vim-css3-syntax
"https://github.com/kien/ctrlp.vim
"https://github.com/tpope/vim-cucumber
"https://github.com/elixir-lang/vim-elixir
"https://github.com/tpope/vim-endwise
"https://github.com/tpope/vim-fugitive
"https://github.com/vim-scripts/Gist.vim
"https://github.com/sjl/gundo.vim
"https://github.com/tpope/vim-haml
"https://github.com/pangloss/vim-javascript
"https://github.com/elzr/vim-json
"https://github.com/mxw/vim-jsx
"https://github.com/vim-scripts/L9
"https://github.com/groenewege/vim-less
"https://github.com/ujihisa/vim-markdown
"https://github.com/vim-scripts/matchit.zip
"https://github.com/nviennot/molokai
"https://github.com/scrooloose/nerdcommenter
"https://github.com/scrooloose/nerdtree
"https://github.com/nviennot/vim-powerline
"https://github.com/tomtom/quickfixsigns_vim
"https://github.com/tpope/vim-rails
"https://github.com/luochen1990/rainbow
"https://github.com/tpope/vim-repeat
"https://github.com/vim-ruby/vim-ruby
"https://github.com/sidnair/scala-vim
"https://github.com/ervandew/screen
"https://github.com/nviennot/vim-config/tree/master/bundle/scribe/syntax
"https://github.com/slim-template/vim-slim
"https://github.com/nviennot/snipmate.vim
"https://github.com/tpope/vim-speeddating
"https://github.com/ervandew/supertab
"https://github.com/tpope/vim-surround
"https://github.com/scrooloose/syntastic
"https://github.com/godlygeek/tabular
"https://github.com/majutsushi/tagbar
"https://github.com/tomtom/tlib_vim
"https://github.com/tpope/vim-unimpaired
"https://github.com/mattn/webapi-vim
"https://github.com/sukima/xmledit
"https://github.com/vim-scripts/YankRing.vim

" these are snipmate dependencies
"Plugin 'MarcWebber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'honza/vim-snippets'
"Plugin 'garbas/vim-snipmate'
"
"Plugin 'tomtom/tcomment_vim'
"  consider Plugin 'tpope/vim-commentary'
"Plugin 'tpope/vim-endwise'
"
"  themes (choose one!)
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'tomasr/molokai'
"
"Plugin 'tpope/vim-surround'
"Plugin 'ervandew/supertab'
"Plugin 'kien/ctrlp.vim'
"Plugin 'tpope/vim-fugitive'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'kien/ctrlp.vim'
"Plugin 'skalnik/vim-vroom'
"Plugin 'tpope/vim-dispatch'
"Plugin 'mattn/webapi-vim'
"Plugin 'mattn/gist-vim'
"
"  languages
"Plugin 'vim-ruby/vim-ruby'
"Plugin 'tpope/vim-rails.git'
"Plugin 'kchmck/vim-coffee-script'
"Plugin 'elixir-lang/vim-elixir'
"Plugin 'guns/vim-clojure-static'
"Plugin 'jimenezrick/vimerl'

"let g:vroom_map_keys = 0
"let g:vroom_use_dispatch = 1
"let g:vroom_use_zeus = 1
"map <leader>c :call vroom#RunTestFile()<CR>
"map <leader>s :call vroom#RunNearestTest()<CR>
"map <leader>t :A<CR> " \t to jump to test file

call vundle#end()

colorscheme molokai

syntax enable
filetype plugin indent on

" TODO: consider vim-vinegar as a replacement of nerdtree
" Display options
syntax on
set cursorline
set number
set relativenumber
set list!                       " Display unprintable characters
" note: removed the next line because shows an error in docker ...
" set listchars=tab:▸\ ,trail:•,extends:»,precedes:«
if $TERM =~ '256color'
  set t_Co=256
elseif $TERM =~ '^xterm$'
  set t_Co=256
endif
let g:cssColorVimDoNotMessMyUpdatetime = 1

" Misc
filetype plugin indent on       " Do filetype detection and load custom file plugins and indent files
set hidden                      " Don't abandon buffers moved to the background
set wildmenu                    " Enhanced completion hints in command line
set wildmode=list:longest,full  " Complete longest common match and show possible matches and wildmenu
set backspace=eol,start,indent  " Allow backspacing over indent, eol, & start
set complete=.,w,b,u,U,t,i,d    " Do lots of scanning on tab completion
set updatecount=100             " Write swap file to disk every 100 chars
set directory=~/.config/dotfiles/vim/swap       " Directory to use for the swap file
set diffopt=filler,iwhite       " In diff mode, ignore whitespace changes and align unchanged lines
set history=1000                " Remember 1000 commands
set scrolloff=3                 " Start scrolling 3 lines before the horizontal window border
set visualbell t_vb=            " Disable error bells
set shortmess+=A                " Always edit file, even when swap file is found
set foldlevelstart=99


imap fd <Esc>

" up/down on displayed lines, not real lines. More useful than painful.
noremap k gk
noremap j gj

" Formatting, indentation and tabbing
set autoindent smartindent
set smarttab                    " Make <tab> and <backspace> smarter
set expandtab
set tabstop=2
set shiftwidth=2
" set textwidth=80
set formatoptions-=t formatoptions+=croql

" viminfo: remember certain things when we exit
" (http://vimdoc.sourceforge.net/htmldoc/usr_21.html)
"   %    : saves and restores the buffer list
"   '100 : marks will be remembered for up to 30 previously edited files
"   /100 : save 100 lines from search history
"   h    : disable hlsearch on start
"   "500 : save up to 500 lines for each register
"   :1000 : up to 1000 lines of command-line history will be remembered
"   n... : where to save the viminfo files
set viminfo=%100,'100,/100,h,\"500,:1000,n~/.config/dotfiles/vim/viminfo

" ctags: recurse up to home to find tags. See
" http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
" for an explanation and other ctags tips/tricks
set tags+=tags;$HOME

" Undo
set undolevels=10000
if has("persistent_undo")
  set undodir=~/.config/dotfiles/vim/undo       " Allow undoes to persist even after a file is closed
  set undofile
endif

" Search settings
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch

" to_html settings
let html_number_lines = 1
let html_ignore_folding = 1
let html_use_css = 1
let xml_use_xhtml = 1

" When opening a file, always jump to the last cursor position
autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \     exe "normal g'\"zz" |
    \ endif |


" After 4s of inactivity, check for external file modifications on next keyrpress
au CursorHold * checktime

"""""""""""""""""""""""""
" Keybindings
"""""""""""""""""""""""""
let mapleader=","
let localmapleader=","

nmap <Leader>s :%S/
vmap <Leader>s :S/

vnoremap . :normal .<CR>
vnoremap @ :normal! @

" Toggles
set pastetoggle=<F1>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>
" the nmap is just for quicker powerline feedback
nmap <silent> <F1>      :set invpaste<CR>
nmap          <F2>      :setlocal spell!<CR>
imap          <F2> <C-o>:setlocal spell!<CR>
nmap <silent> <F3>      :set invwrap<CR>
" TODO toggle numbers

map <Leader>/ :nohlsearch<cr>
map <Home> :tprev<CR>
map <End>  :tnext<CR>

" TODO Do also cnext and cprev as a fallback
map <PageDown> :lnext<CR>
map <PageUp>   :lprev<CR>

" Make Y consistent with D and C
function! YRRunAfterMaps()
  nnoremap <silent> Y :<C-U>YRYankCount 'y$'<CR>
endfunction

" Disable K for manpages - not used often and easy to accidentally hit
" noremap K k

" Resize window splits
nnoremap <S-Up>    3<C-w>-
nnoremap <S-Down>  3<C-w>+
nnoremap <S-Left>  3<C-w><
nnoremap <silent> <S-Right> 3<C-w>>

map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" maximize current horizontal split
set winheight=10
set wmh=10
map - <c-w>_

nnoremap _ :split<cr>
nnoremap \| :vsplit<cr>

vmap s :!sort<CR>
vmap u :!sort -u<CR>

" shift+k -> like shift+j, but no extra space
" noremap <S-k> gJ

" Write file when you forget to use sudo
cmap w!! w !sudo tee % >/dev/null

"""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""
nnoremap <Leader>b :BufSurfBack<cr>
nnoremap <Leader>f :BufSurfForward<cr>

nnoremap <S-u> :GundoToggle<CR>
let g:gundo_close_on_revert=1


" TODO Merge the NERDTreeFind with Toggle inteilligently.
nnoremap <C-g> :NERDTreeToggle<cr>

let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$',
                   \ '\.so$', '\.egg$', '^\.git$', '\.cmi', '\.cmo' ]
let NERDTreeHighlightCursorline=1
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1

nnoremap <silent> <Leader>gd :Gdiff<CR>
nnoremap <silent> <Leader>gb :Gblame<CR>
nnoremap <silent> <Leader>gc :Gcommit<CR>
nnoremap <silent> <Leader>gs :Gstatus<CR>

nnoremap <Leader>a :Ack 

" Put a space around comment markers
let g:NERDSpaceDelims = 1
map <leader>k <plug>NERDCommenterToggle
imap <leader>k <Esc><plug>NERDCommenterTogglei

nnoremap <C-y> :YRShow<cr>
let g:yankring_history_dir = '$HOME/.config/dotfiles/vim'
let g:yankring_manual_clipboard_check = 0

map <Leader>l :MiniBufExplorer<cr>
let g:miniBufExplorerMoreThanOne = 10000
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplSplitBelow=1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplVSplit = 20

let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['tex', 'c', 'scss', 'html', 'scala'] }
let g:syntastic_javascript_checkers = ['jsxhint']


let g:quickfixsigns_classes=['qfl', 'vcsdiff', 'breakpoints']

let g:Powerline_symbols = 'unicode'
set laststatus=2

let g:ctrlp_map = '<Leader>.'
let g:ctrlp_custom_ignore = '/\.\|\.o\|\.so'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_regexp = 1
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files']
map <Leader>, :CtrlPMRU<CR>

noremap \= :Tabularize /=<CR>
noremap \: :Tabularize /^[^:]*:\zs/l0l1<CR>
noremap \> :Tabularize /=><CR>
noremap \, :Tabularize /,\zs/l0l1<CR>
noremap \{ :Tabularize /{<CR>
noremap \\| :Tabularize /\|<CR>
noremap \& :Tabularize /\(&\\|\\\\\)<CR>

nnoremap <Leader>t :TagbarOpen fjc<CR>

" Screen settings
let g:ScreenImpl = 'Tmux'
let g:ScreenShellTmuxInitArgs = '-2'
let g:ScreenShellInitialFocus = 'shell'
let g:ScreenShellQuitOnVimExit = 0

map <C-\> :ScreenShellVertical<CR>

"""""""""""""""""""""""""
" Ruby Stuff
"""""""""""""""""""""""""
command -nargs=? -complete=shellcmd W  :w | :call ScreenShellSend("load '".@%."';")
map <Leader>r :w<CR> :call ScreenShellSend("rspec ".@% . ':' . line('.'))<CR>
map <Leader>e :w<CR> :call ScreenShellSend("cucumber --format=pretty ".@% . ':' . line('.'))<CR>
map <Leader>w :w<CR> :call ScreenShellSend("break ".@% . ':' . line('.'))<CR>
map <Leader>m :w<CR> :call ScreenShellSend("\e[A")<CR>

"""""""""""""""""""""""""
" Cscope
"""""""""""""""""""""""""
if has("cscope")
  " Use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  set cscopetag

  " Check cscope for definition of a symbol before checking ctags. Set to 1 if
  " you want the reverse search order.
  set csto=0

  " Add any cscope database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
  endif

  " Show msg when any other cscope db is added
  set cscopeverbose
end

"""""""""""""""""""""""""
" Local config
"""""""""""""""""""""""""
so ~/.config/dotfiles/vim/vimrc.mine

" TODO raise contrast for comments

autocmd FileType markdown setlocal syntax=off

let g:vim_json_syntax_conceal = 0


"" Rainbow config
let g:rainbow_conf = { 'ctermfgs': ['red', 'yellow', 'green', 'cyan', 'magenta', 'red', 'yellow', 'green', 'cyan', 'magenta'] }
let g:rainbow_matching_filetypes = ['lisp', 'scheme', 'clojure', 'javascript', 'html']

function s:load()
  if count(g:rainbow_matching_filetypes, &ft) > 0
    call rainbow#hook()
  endif
endfunction

augroup rainbow
  autocmd!
  autocmd BufNewFile,BufReadPost,FilterReadPost,FileReadPost,Syntax * nested call s:load()
augroup END

" fix for vim-javascript + rainbow incompatibility
autocmd FileType javascript syntax clear jsFuncBlock
" autocmd BufRead,BufNewFile *.es6 setfiletype javascript
set nocursorline

set mouse=a

" set relativenumber
let ctrlp_regexp = 0
let ctrlp_by_filename = 1
set hidden

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
"nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags <cr>
nmap <leader>md :!/usr/local/bin/Markdown.pl --html4tags %<cr>

" these two lines make nerdtree open in the current buffer
map <silent> <leader>d :execute 'e '. getcwd()<CR>
let NERDTreeHijackNetrw=1

"map <c-]> gt
"map <c-[> gT

" map <m-1> 1gt
" map <m-2> 2gt
" map <m-3> 3gt
" map <m-4> 4gt
" map <m-5> 5gt
" map <m-6> 6gt
" map <m-7> 7gt
" map <m-8> 8gt
" map <m-9> 9gt
" map <m-0> :tablast<CR>


" set ruler
" set matchpairs+=<:>
" set backspace=indent,eol,start
" set switchbuf=usetab,newtab
set switchbuf=usetab
" set wm=0
" let macvim_skip_colorscheme=1
" colorscheme murphy
"
" to prevent "crontab: temp file must be edited in place" error
autocmd filetype crontab setlocal nobackup nowritebackup

" Needed for tmux and vim to play nice
" map <Esc>[A <Up>
" map <Esc>[B <Down>
" map <Esc>[C <Right>
" map <Esc>[D <Left>

" " Console movement
" cmap <Esc>[A <Up>
" cmap <Esc>[B <Down>
" cmap <Esc>[C <Right>
" cmap <Esc>[D <Left>

" if &term =~ '^screen'
  " " tmux will send xterm-style keys when its xterm-keys option is on
  " execute "set <xUp>=\e[1;*A"
  " execute "set <xDown>=\e[1;*B"
  " execute "set <xRight>=\e[1;*C"
  " execute "set <xLeft>=\e[1;*D"
" endif

" make yank and put commands use the OS clipboard
set clipboard=unnamed

