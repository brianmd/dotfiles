* Todos
** TODO swap helm C-z and TAB as recommended?
http://spacemacs.org/doc/DOCUMENTATION.html#helm
** Shortcut keys to remember
   [
this
issues
]
SPC w b   return focus to helm minibuffer if it loses focus



* Notes
;; use SPC z f to increase/decrease font size

* spacemacs init
** Other org emacs dotfiles
- https://github.com/zamansky/using-emacs/blob/master/myinit.org
- http://aaronbedra.com/emacs.d/
** Initial Setup
#+BEGIN_SRC emacs-lisp
;; save customizations from the UI (M-x customize) to its own file
(setq custom-file "~/.config/dotfiles/spacemacs/custom.el")
(load custom-file 'noerror)

;; may need to do some setup before calling this?
(package-initialize)
#+END_SRC

Set up the org-mode fonts
;; from https://zzamboni.org/post/beautifying-org-mode-in-emacs/
;; this section will remain enabled. The section below, also from this same web page

First, we ask org-mode to hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

Then, we set up a font-lock substitution for list markers (I always use “-” for lists, but you can change this if you want) by replacing them with a centered-dot character:

(for some reason this isn't working)
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

Would like to have text be serif, headers sans, and code blocks proportional. The following does not get us there, so it is disabled for now..
#+BEGIN_SRC emacs-lisp ;; :tangle no
;; also from https://zzamboni.org/post/beautifying-org-mode-in-emacs/

;; don't know that this does any better than the specific section in the org mode section
;; (use-package org-bullets
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(let* ((variable-tuple
        (cond
              ((x-list-fonts "Times New Roman") '(:font "Times New Roman"))
              ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Verdana")         '(:font "Verdana"))
              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       ;; (base-font-color     (face-foreground 'default nil 'default))
       ;; (headline           `(:inherit default :weight bold :foreground ,base-font-color))
       (headline           `(:inherit default :weight bold))
       )

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
 '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'visual-line-mode)

(custom-theme-set-faces
 'user
 '(org-block                 ((t (:inherit fixed-pitch))))
 '(org-document-info         ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-link                  ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value        ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent                ((t (:inherit (org-hide fixed-pitch))))))

;; ^^^^^ from https://zzamboni.org/post/beautifying-org-mode-in-emacs/
#+END_SRC
this is a test
0000
llll

#+RESULTS:

#+BEGIN_SRC emacs-lisp
 (defun debug-msg (msg)
   (if t
     (message msg)))
 (debug-msg "starting spacemacs init ...")

 (defun load-if-exists (f)
   "load the elisp file only if it exists and is readable"
   (if (file-readable-p f)
       (load-file f)))

 ;; (load-if-exists "~/Sync/shared/mu4econfig.el")
 ;; (load-if-exists "~/Sync/shared/not-for-github.el")
 #+END_SRC

 #+RESULTS:
 : load-if-exists

  - test
  - again

** Babel
#+BEGIN_SRC emacs-lisp
;; Syntax highlight in #+BEGIN_SRC blocks
(setq org-src-fontify-natively t)
;; Don't prompt before running code in org
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
(debug-msg "clojure ...")

;; allow cursor past eol; useful for evaluating in clojure
;; (setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)

;; by default (GET "/user/:id" [id]\n{:body ...}, body will align with /user/:id
;; (put-clojure-indent 'GET 2) ;; now always indent by 2

(global-set-key (kbd "C-e") 'cider-eval-defun-at-point)

                                        ;(define-key cider-minor-mode (kbd "M-e") 'cider-eval-defun-at-point)
                                        ;(define-key cider-minor-mode (kbd "M-l") 'cider-eval-buffer)
                                        ;(setq clojure-enable-fancify-symbols t)
; (spacemacs/set-leader-keys-for-major-mode 'clojure-mode "e;" 'cider-pprint-eval-defun-to-comment)
(spacemacs/set-leader-keys-for-major-mode 'clojure-mode "ec" 'cider-ppprint-eval-last-sexp-to-comment)

;; (add-to-list 'exec-path "/home/zamansky/bin/")


;; (evil-define-key 'normal clojure-mode-map (kbd ", e ;") 'cider-pprint-eval-defun-to-comment)

;; (add-hook 'clojure-mode-hook
;;           (lambda()
;;             (spacemacs/set-leader-keys-for-major-mode 'clojure-mode
;;               "ec" 'cider-pprint-eval-defun-to-comment)))
;; (spacemacs|use-package-add-hook clojure
;;   :post-config
;;   (spacemacs/set-leader-keys-for-major-mode 'clojure-mode
;;     "ec" 'cider-pprint-eval-defun-to-comment))

(setq deft-directory "~/drop/notes")
#+END_SRC
** Copy/Paste
#+BEGIN_SRC emacs-lisp
(debug-msg "copy/paste ...")
  (setq x-select-enable-clipboard t)
  ;; (setq mouse-drag-copy-region t)

  ;; (define-key evil-normal-state-map "y" "\"+y")
  ;; (fset 'evil-visual-update-x-selection 'ignore)
  ;; (global-set-key (kbd "<mouse-2>") 'x-clipboard-yank)

  ;; this is what makes copy/paste work in terminal mode.
  ;; IMPORTANT: local and remote systems also need xsel
  ;; from https://hugoheden.wordpress.com/2009/03/08/copypaste-with-emacs-in-terminal/
  (unless window-system
   (when (getenv "DISPLAY")
    ;; Callback for when user cuts
    (defun xsel-cut-function (text &optional push)
      ;; Insert text to temp-buffer, and "send" content to xsel stdin
      (with-temp-buffer
        (insert text)
        ;; I prefer using the "clipboard" selection (the one the
        ;; typically is used by c-c/c-v) before the primary selection
        ;; (that uses mouse-select/middle-button-click)
        (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
    ;; Call back for when user pastes
    (defun xsel-paste-function()
      ;; Find out what is current selection by xsel. If it is different
      ;; from the top of the kill-ring (car kill-ring), then return
      ;; it. Else, nil is returned, so whatever is in the top of the
      ;; kill-ring will be used.
      (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
        (unless (string= (car kill-ring) xsel-output)
	xsel-output )))
    ;; Attach callbacks to hooks
    ;; (setq interprogram-cut-function 'xsel-cut-function)
    ;; (setq interprogram-paste-function 'xsel-paste-function)
    ;; Idea from
    ;; http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/
    ;; http://www.mail-archive.com/help-gnu-emacs@gnu.org/msg03577.html
   ))
#+END_SRC
** Dash
#+BEGIN_SRC emacs-lisp
(setq helm-dash-common-docsets '("Redis" "Ruby"))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))

(use-package dired-narrow
  :ensure t
  :config
  (bind-key "C-c C-n" #'dired-narrow)
  ;; ("bind-key C-c C-f" #'dired-narrow-fuzzy)
  (bind-key "C-x C-N" #'dired-narrow-regexp)
  )

(use-package dired-collapse
  :ensure t
  ;; :after dired
  :config
  ;; (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  ;; (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
  )
(add-hook 'dired-hook #'dired-collapse-mode)

(use-package dired-subtree
  :ensure t
  ;; :after dired
  :config
  (bind-key "i" #'dired-subtree-toggle dired-mode-map)
  ;; (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC
** Elisp Aliases
#+BEGIN_SRC emacs-lisp
;; this is a just-in-case I forget I'm already emacs
(defun eshell/emacs (file)
      (find-file file))
(defun eshell/vim (file)
      (find-file file))
(defun eshell/e (file)
      (find-file file))
(defun eshell/ee (file)
      (find-file-other-window file))

(defun eshell/gs () (git status))

;; from http://www.howardism.org/Technical/Emacs/eshell-fun.html
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))
(global-set-key (kbd "C-!") 'eshell-here)
(defun eshell/x ()
  (insert "exit")
  (eshell-send-input)
  (delete-window))


;; alias ll 'ls -l $*'
;; ls -al > #<buffer some-notes.org>
#+END_SRC
** Emacs Lisp
You can bring emacs lisp closer to common lisp? How cool!
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
#+END_SRC

For viewing large log files:
#+BEGIN_SRC emacs-lisp :tangle no
For viewing large log files, vlf will load the file in chunks.
Doesn't feel like a very good workflow though.
Might look at log4j-mode or logview.
#+BEGIN_SRC emacs-lisp :tangle no
(require 'vlf-setup)
(custom-set-variables '(vlf-application 'dont-ask))
#+END_SRC
** Eshell
Set which commands should switch to ansi-term.
#+BEGIN_SRC emacs-lisp
;; from http://aaronbedra.com/emacs.d/
;; (require 'f)

(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))

(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

;; ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
;; (defmacro with-face (str &rest properties)
;;   `(propertize ,str 'face (list ,@properties)))

;; (defun eshell/abbr-pwd ()
;;   (let ((home (getenv "HOME"))
;;         (path (eshell/pwd)))
;;     (cond
;;      ((string-equal home path) "~")
;;      ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
;;      (path))))

;; (defun eshell/my-prompt ()
;;   (let ((header-bg "#161616"))
;;     (concat
;;      (with-face (eshell/abbr-pwd) :foreground "#008700")
;;      (if (= (user-uid) 0)
;;          (with-face "#" :foreground "red")
;;        (with-face "$" :foreground "#2345ba"))
;;      " ")))

;; (setq eshell-prompt-function 'eshell/my-prompt)
;; (setq eshell-highlight-prompt nil)
;; (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")

;; (setq eshell-cmpl-cycle-completions nil)
#+END_SRC
** Eww
#+BEGIN_SRC emacs-lisp :tangle no
;; keybindings are exactly the same as in vimperator unless otherwise stated
(evil-define-key 'normal eww-mode-map
  "\\" 'browse-url
  "&" 'eww-browse-with-external-browser ;; default in eww-mode
  "q" 'eww-quit ;; different in vimperator (run macro)
  "a" 'eww-add-bookmark
  "yy" 'eww-copy-page-url
  "f" 'eww-lnum-follow
  "F" 'eww-lnum-universal ;; in vimperator open new tab
  "gu" 'eww-up-url
  "gt" 'eww-top-url
  "h" 'eww-back-url ;; H in vimperator, because h is :help, but I think lowercase is better for us
  "l" 'eww-forward-url ;; in vimperator, L is used for consistency, but again I think lower case is nicer for us
  "r" 'eww-reload
  )

;; 'o' is like 'f' in cVIM (ace-link-eww)

;; Emacs Web Wowser   (note: evil-leader is ',')
(evil-leader/set-key-for-mode 'eww-mode
  "ob"    'eww-add-bookmark
  "od"    'eww-download
  "oe"    'eww-browse-with-external-browser
  "og"    'eww-reload
  "oh"    'eww-back-url
  "ol"    'eww-forward-url
  "oq"    'eww-quit
  "ow"    'eww-copy-page-url
  "oB"    'eww-list-bookmarks
  "oH"    'eww-list-histories
  )



;; http://oremacs.com/2014/12/30/ace-link-eww/

(defun oleh-eww-hook ()
  (define-key eww-mode-map "j" 'oww-down)
  (define-key eww-mode-map "k" 'oww-up)
  (define-key eww-mode-map "l" 'forward-char)
  (define-key eww-mode-map "L" 'eww-forward-url)
  (define-key eww-mode-map "h" 'backward-char)
  (define-key eww-mode-map "H" 'eww-back-url)
  (define-key eww-mode-map "v" 'recenter-top-bottom)
  (define-key eww-mode-map "V" 'eww-view-source)
  (define-key eww-mode-map "m" 'eww-follow-link)
  (define-key eww-mode-map "a" 'move-beginning-of-line)
  (define-key eww-mode-map "e" 'move-end-of-line)
  (define-key eww-mode-map "o" 'ace-link-eww)
  (define-key eww-mode-map "y" 'eww))
(add-hook 'eww-mode-hook 'oleh-eww-hook)

(defun oww-down (arg)
  (interactive "p")
  (if (bolp)
      (progn
        (forward-paragraph arg)
        (forward-line 1))
    (line-move arg)))

(defun oww-up (arg)
  (interactive "p")
  (if (bolp)
      (progn
        (forward-line -1)
        (backward-paragraph arg)
        (forward-line 1))
    (line-move (- arg))))


;; https://github.com/dakrone/eos/blob/master/eos-web.org
(use-package eww
  :defer t
  :init
  (setq browse-url-browser-function
        '((".*google.*maps.*" . browse-url-generic)
          ;; Github goes to firefox, but not gist
          ("http.*\/\/github.com" . browse-url-generic)
          ("groups.google.com" . browse-url-generic)
          ("docs.google.com" . browse-url-generic)
          ("melpa.org" . browse-url-generic)
          ("build.*\.elastic.co" . browse-url-generic)
          (".*-ci\.elastic.co" . browse-url-generic)
          ("internal-ci\.elastic\.co" . browse-url-generic)
          ("zendesk\.com" . browse-url-generic)
          ("salesforce\.com" . browse-url-generic)
          ("stackoverflow\.com" . browse-url-generic)
          ("apache\.org\/jira" . browse-url-generic)
          ("thepoachedegg\.net" . browse-url-generic)
          ("zoom.us" . browse-url-generic)
          ("t.co" . browse-url-generic)
          ("twitter.com" . browse-url-generic)
          ("\/\/a.co" . browse-url-generic)
          ("youtube.com" . browse-url-generic)
          ("amazon.com" . browse-url-generic)
          ("." . eww-browse-url)))
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program (executable-find "firefox"))
  (add-hook 'eww-mode-hook #'toggle-word-wrap)
  (add-hook 'eww-mode-hook #'visual-line-mode)
  :config
  (use-package s :ensure t)
  (define-key eww-mode-map "o" 'eww)
  (define-key eww-mode-map "O" 'eww-browse-with-external-browser)
  (define-key eww-mode-map "j" 'next-line)
  (define-key eww-mode-map "k" 'previous-line)

  (use-package eww-lnum
    :ensure t
    :config
    (bind-key "f" #'eww-lnum-follow eww-mode-map)
    (bind-key "U" #'eww-lnum-universal eww-mode-map)))

(use-package link-hint
  :ensure t
  :bind ("C-c f" . link-hint-open-link))

(defun browse-last-url-in-brower ()
  (interactive)
  (save-excursion
    (ffap-next-url t t)))

(global-set-key (kbd "of") 'browse-last-url-in-brower) ;; firefox
(global-set-key (kbd "ob") 'browse-url-at-point)
#+END_SRC

** Eyebrowse
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys
  "obc" 'eyebrowse-create-window-config
  "obr" 'eyebrowse-rename-window-config
  "ob'" 'eyebrowse-last-window-config
  "ob." 'eyebrowse-switch-to-window-config

  "o0" 'eyebrowse-switch-to-window-config-0
  "o1" 'eyebrowse-switch-to-window-config-1
  "o2" 'eyebrowse-switch-to-window-config-2
  "o3" 'eyebrowse-switch-to-window-config-3
  "o4" 'eyebrowse-switch-to-window-config-4
  "o5" 'eyebrowse-switch-to-window-config-5
  "o6" 'eyebrowse-switch-to-window-config-6
  "o7" 'eyebrowse-switch-to-window-config-7
  "o8" 'eyebrowse-switch-to-window-config-8
  "o9" 'eyebrowse-switch-to-window-config-9
  )
#+END_SRC
** Files
Allow typing 'y' or 'n' on all prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Storing backup files next to the file being edited causes
issues with ruby, so store them in the tmp directory.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

But since we're storing in a global place, let's delete
older backup files.
#+BEGIN_SRC emacs-lisp
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(debug-msg "fonts ...")
;;; Monaco font for programming (and some other modes)
;; from https://www.reddit.com/r/emacs/comments/73lplp/what_are_your_preferred_fonts_in_emacs/
(defvar dh-monaco-face-remapping-alist nil)

(when window-system
  (defface dh-default-monaco-face
    '((t (:family "Monaco" :inherit default)))
    "Default face with the Monaco font"
    :group 'basic-faces)

  (defface dh-bold-monaco-face
    '((t (:family "DejaVu Sans Mono" :inherit bold)))
    "Default bold face with the Monaco font"
    :group 'basic-faces)

  (defface dh-italic-monaco-face
    '((t (:family "DejaVu Sans Mono" :inherit italic)))
    "Default bold face with the Monaco font"
    :group 'basic-faces)

  (setq dh-monaco-face-remapping-alist
	'((default dh-default-monaco-face)
	  (bold dh-bold-monaco-face)
	  (italic dh-italic-monaco-face))))

(defun dh-set-monaco-font ()
  (setq-local face-remapping-alist dh-monaco-face-remapping-alist))

;; TODO the # sign causes an error, even though it is correct :(
;; (add-hook 'prog-mode-hook #’dh-set-monaco-font)
#+END_SRC
** Gnus (nothing here yet)
** Indent Tabs
Don't ever, ever save tabs, and make trailing whitespace visible. Note: The setq-default command sets values only in buffers that do not have their own local values for the variable.

Also, set tabs to two spaces in a lot of modes.
#+BEGIN_SRC emacs-lisp
(debug-msg "indent tabs ...")
(setq-default indent-tabs-mode nil)

(setq-default show-trailing-whitespace t)
;; (defun set-indent (n)
;;   (setq-default
;;    c-basic-offset n
;;    coffee-tab-width n
;;    css-indent-offset n
;;    default-tab-width n
;;    evil-shift-width n
;;    javascript-indent-level n
;;    js2-basic-offset n
;;    js-indent-level n
;;    json-indent-level n
;;    json-tab-width n
;;    prolog-indent-width n
;;    python-indent n
;;    python-indent-offset n
;;    ruby-indent n
;;    ruby-tab-width n
;;    sh-indentation n
;;    standard-indent n
;;    tab-width n
;;    web-mode-attr-indent-offset n
;;    web-mode-code-indent-offset n
;;    web-mode-css-indent-offset n
;;    web-mode-markup-indent-offset n
;;    yaml-indent-offset n
;;    ))

(defun set-tab-width (n)
  (dolist (var '(
                 default-tab-width
                 c-basic-offset
                 cmake-tab-width
                 coffee-tab-width
                 cperl-indent-level
                 css-indent-offset
                 elixir-smie-indent-basic
                 enh-ruby-indent-level
                 erlang-indent-level
                 ess-indent-level
                 evil-shift-width
                 javascript-indent-level
                 js-indent-level
                 js2-basic-offset
                 js3-indent-level
                 json-indent-level
                 lisp-indent-offset
                 livescript-tab-width
                 mustache-basic-offset
                 nxml-child-indent
                 perl-indent-level
                 prolog-indedent-offset
                 puppet-indent-level
                 python-indent-offset
                 ruby-indent
                 ruby-indent-level
                 ruby-tab-width
                 rust-indent-offset
                 scala-indent:step
                 sgml-basic-offset
                 sh-basic-offset
                 sh-indentation
                 tab-width
                 web-mode-attr-indent-offset
                 web-mode-code-indent-offset
                 web-mode-css-indent-offset
                 web-mode-markup-indent-offset
                 yaml-indent-offset n
                 ))
    (set (make-local-variable var) n)))

;; (set-indent 2)
(set-tab-width 2)
(setq js-indent-level 2)
(add-hook 'shell-script-hook (lambda () (set-indent 2)))
#+END_SRC

#+RESULTS:
| lambda | nil | (set-indent 2) |

Use untabify-buffer if someone left tabs in the files
 #+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+END_SRC

Turn on line wrap globally.
 #+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
** Mail, news, and irc
#+BEGIN_SRC emacs-lisp
  ;; ;; Get email, and store in nnml
  ;; (setq gnus-secondary-select-methods
  ;;   '(
  ;;     (nntp "gmane" (nntp-address "news.gmane.org"))
  ;;     (nntp "news.eternal-september.org")
  ;;     (nntp "nntp.aioe.org")
  ;;     (nntp "news.gwene.org")
  ;;     (nnimap "gmail"
  ;;             (nnimap-address
  ;;              "imap.gmail.com")
  ;;             (nnimap-server-port 993)
  ;;             (nnimap-stream ssl))
  ;;     ))

  ;; ;; Send email via Gmail:
  ;; (setq message-send-mail-function 'smtpmail-send-it
  ;;       smtpmail-default-smtp-server "smtp.gmail.com")

  ;; ;; Archive outgoing email in Sent folder on imap.gmail.com:
  ;; (setq gnus-message-archive-method '(nnimap "imap.gmail.com")
  ;;       gnus-message-archive-group "[Gmail]/Sent Mail")

  ;; ;; set return email address based on incoming email address
  ;; (setq gnus-posting-styles
  ;;       ;; '(((header "to" "address@outlook.com")
  ;;       ;;    (address "address@outlook.com"))
  ;;         ((header "to" "brian@murphydye.com")
  ;;          (address "brian@murphydye.com"))
  ;;         ;; ((header "to" "bmdmailer@gmail.com")
  ;;         ;;  (address "bmdmailer@gmail.com"))
  ;;         )
      ;; )

  ;; ;; store email in ~/gmail directory
  ;; (setq nnml-directory "~/.config/gmail")
  ;; (setq message-directory "~/.config/gmail")
#+END_SRC

** Misc
These are still searching for a home
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-finish-functions
  (lambda (buf strg)
    (switch-to-buffer-other-window "*compilation*")
    (read-only-mode)
    (goto-char (point-max))
    (local-set-key (kbd "q")
      (lambda () (interactive) (quit-restore-window)))))

(defun ace-link-setup-default ()
  "Setup the defualt shortcuts."
  (eval-after-load "info"
    '(define-key Info-mode-map "o" 'ace-link-info))
  (eval-after-load "help-mode"
    '(define-key help-mode-map "o" 'ace-link-help))
  (eval-after-load "eww"
    '(progn
       (define-key eww-link-keymap "o" 'ace-link-eww)
       (define-key eww-mode-map "o" 'ace-link-eww))))

(ace-link-setup-default)

(setq ranger-cleanup-eagerly t)

;; use SPC z f to increase/decrease font size
;; (global-set-key (kbd "C-=") 'text-scale-increase)
;; (global-set-key (kbd "C--") 'text-scale-decrease)
;; (global-set-key (kbd "C-0") 'text-scale-mode) ;; conflicts with mac goto-space-0

#+END_SRC

** Mouse
#+BEGIN_SRC emacs-lisp
(debug-msg "mouse ...")
(when nil
;(unless window-system
  ;; (require 'mwheel)
  ;; (require 'mouse)
  ;; (xterm-mouse-mode t)
  ;; (mouse-wheel-mode t)
  ;; (global-set-key [mouse-4] 'next-line)
  ;; (global-set-key [mouse-5] 'previous-line)
  (global-set-key [mouse-4] 'scroll-down-line)
  (global-set-key [mouse-5] 'scroll-up-line)
  )

  ;; (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
  ;; (setq mouse-wheel-scroll-amount '(1)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
  ;; (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 line

  ;; (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; two lines at a time
  ;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  ;; (setq mouse-wheel-follow-mouse't) ;; scroll window under mouse

  ;; ( require 'smooth-scroll                        ) ;; Smooth scroll
  ;; ( smooth-scroll-mode 1                          ) ;; Enable it
  ;; ( setq smooth-scroll/vscroll-step-size 5        ) ;; Set the speed right

;; (xterm-mouse-mode -1)
;; ;; (setq x-select-enable-clipboard t)
;; (setq mouse-drag-copy-region t)

;; (setq transient-mark-mode t)
#+END_SRC
** Narrow/widen
#+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

;; (define-key endless/toggle-map "n"
;;   #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only
;; copy it if that's what you want.
;; (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
(spacemacs/set-leader-keys
  "nn" 'narrow-or-widen-dwim)

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (define-key LaTeX-mode-map "\C-xn"
              nil)))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(debug-msg "org ...")
(require 'org)

(setq org-journal-dir "~/drop/notes/journal/")
(setq org-brain-path "~/drop/brain/")
(setq org-attach-directory "~/drop/notes/")
;; (setq-default org-attach-directory "~/drop/notes/")
(setq org-default-notes-file (concat org-directory "1.todo.org"))

(setq org-agenda-files (list
                        ;; "~/Dropbox/docs/org/gtd.org"
                        ;; "~/Dropbox/docs/org/work.org"
                        ;; "~/Dropbox/docs/org/home.org"
                        ;; "~/Dropbox/docs/org/"
                        "~/drop/notes"
                        ))

;; the following needs to be included with other layers in spacemacs file
;; (setq-default dotspacemacs-configuration-layers
;;              '((erc :variables
;;                     erc-server-list
;;                     '(("irc.freenode.net"
;;                        :port "6697"
;;                        :ssl t
;;                        :nick "some-user"
;;                        :password "secret")
;;                       ))))

(setq org-capture-templates
      '(("t" "GTD" entry (file+headline "~/drop/notes/gtd.org" "GTD")
         "* TODO %?\n  %i\n  %a")
        ("w" "Work Journal" entry (file+datetree "~/drop/notes/work-journal.org")
         "* %?")
        ("x" "Work Journal (extended entry)" entry (file+datetree "~/drop/notes/work-journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/drop/notes/journal.org")
         ;; "* %?\nEntered on %U\n  %i\n  %a")
         "* TODO %?\nEntered on %U")
        ))
  ;; the above uses these escapes
  ;; %a          annotation, normally the link created with org-store-link
  ;; %i          initial content, the region when capture is called with C-u.
  ;; %t, %T      timestamp, date only, or date and time
  ;; %u, %U      like above, but inactive timestamps

  ;; for org mode
  (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))

  (setq org-todo-keywords
        ;; cone and delegated are completed tasks; the others need further action
    '((sequence "TODO" "FOCUS" "DOING" "|" "DONE" "DELEGATED" "CANCELED")))
    ;; '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED" "CANCELED")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "red" :weight bold))
          ("FEEDBACK" . "yellow")
          ("CANCELED" . (:foreground "blue" :weight bold))
          ))

  ;; (with-eval-after-load
  ;;  'org
  ;  (setq org-agenda-files "/Users/bmd/.config/notes/"))



;; (require 'yafolding)



(spacemacs/set-leader-keys
  "oa" 'org-agenda
  "og" 'helm-org-agenda-files-headings
  "oi" 'org-clock-in
  "oo" 'org-clock-out
  "oc" 'org-capture
  "oC" 'helm-org-capture-templates ;requires templates to be defined.
  "ol" 'org-store-link
  "ot" 'org-toggle-checkbox
  "ov" 'cider-eval-defun-to-comment
  "ow" 'add-work-entry
  "ox" 'add-extended-work-entry
  "mse" 'ruby-send-last-sexp
  "oz" 'find-gtd

  "of" 'yafolding-toggle-element

  "hw" 'sdcv-search-input
  )

(defun add-work-entry ()
  "add work journal entry"
  (interactive)
  (org-capture nil "w")
  (evil-append 1))

(defun add-extended-work-entry ()
  "add extended journal entry"
  (interactive)
  (org-capture nil "x")
  (evil-append 1))

(defun find-gtd ()
  (interactive)
  (find-file "~/drop/notes/gtd.org"))

; Set default column view headings: Task Total-Time Time-Stamp
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC

#+RESULTS:
: %50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA

*** Org babel
 #+BEGIN_SRC emacs-lisp
 ;; (require 'ob-browser)
 (require 'ob-python)
 ;; (require 'ob-ipython)
 (require 'ob-ruby)
 (require 'ob-shell)

 (org-babel-do-load-languages
  'org-babel-load-languages
  '( (emacs-lisp  . t)
     ;; (html . t)
     (js . t)
     (org . t)
     (python . t)
     ;; (ipython . t)
     ;; (r . t)
     (ruby . t)
     (shell . t)
     ))
 #+END_SRC
*** Org & misc
 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/yjwen/org-reveal
 ;; git clone https://github.com/hakimel/reveal.js.git
 ;; (setq org-reveal-root "file:///data/data/com.termux/files/home/code/reveal.js")
 ;; (setq org-reveal-root "file:///home/bmd/code/reveal.js")
 ;; (setq org-reveal-root "file:///home/bmd/.config/dotfiles/docs/reveal.js")
 (setq org-reveal-root "~/.config/dotfiles/docs/reveal.js")
 (setq org-reveal-hlevel 1)
 (setq org-ellipsis "⤵")

 ;; xoxp-10924691317-169530033073-189201081253-8c708f799095a5d0b364b13edb73a0a7
 #+END_SRC
** Personal map -- TODO make my own
#+BEGIN_SRC emacs-lisp :tangle no
unset C- and M- digit keys
;(dotimes (n 10)
;  (global-unset-key (kbd (format "C-%d" n)))
;  (global-unset-key (kbd (format "M-%d" n)))
;  )


(defun org-agenda-show-agenda-and-todo (&optional arg)
  (interactive "P")
  (org-agenda arg "c")
  (org-agenda-fortnight-view))

(defun z/load-iorg ()
(interactive )
(find-file "~/Sync/orgfiles/i.org"))

;; set up my own map
(define-prefix-command 'z-map)
(global-set-key (kbd "C-z") 'z-map) ;; was C-1
(define-key z-map (kbd "k") 'compile)
(define-key z-map (kbd "c") 'hydra-multiple-cursors/body)
(define-key z-map (kbd "m") 'mu4e)
(define-key z-map (kbd "1") 'org-global-cycle)
(define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
(define-key z-map (kbd "g") 'counsel-ag)
(define-key z-map (kbd "2") 'make-frame-command)
(define-key z-map (kbd "0") 'delete-frame)
(define-key z-map (kbd "o") 'ace-window)

(define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
(define-key z-map (kbd "i") 'z/load-iorg)
(define-key z-map (kbd "f") 'origami-toggle-node)
(define-key z-map (kbd "w") 'z/swap-windows)
(define-key z-map (kbd "*") 'calc)


  (setq user-full-name "Mike Zamansky"
                          user-mail-address "mz631@hunter.cuny.edu")
  ;;--------------------------------------------------------------------------


  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/i.org")))

  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/links.org")))

  (global-set-key (kbd "\e\ec")
                  (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))

(global-set-key (kbd "<end>") 'move-end-of-line)

(global-set-key [mouse-3] 'flyspell-correct-word-before-point)
#+END_SRC
** Plantuml
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-plantuml-jar-path "~/.config/dotfiles/plantuml.jar")
#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
(require 'seeing-is-believing)
(add-hook 'ruby-mode-hook 'seeing-is-believing)

(add-hook 'ruby-mode-hook
          (lambda () (hs-minor-mode)))

(eval-after-load "hideshow"
  '(add-to-list 'hs-special-modes-alist
                `(ruby-mode
                  ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
                  ,(rx (or "}" "]" "end"))                       ; Block end
                  ,(rx (or "#" "=begin"))                        ; Comment start
                  ruby-forward-sexp nil)))

(global-set-key (kbd "C-c h <left>") 'hs-hide-block)
(global-set-key (kbd "C-c h <right>") 'hs-show-block)

(global-set-key (kbd "C-c h <up>") 'hs-hide-level)

;; (require 'yafolding)
(add-hook 'ruby-mode-hook 'yafolding-mode)
;; (global-set-key (kbd "M-RET")   'yafolding-toggle-element)
(spacemacs/set-leader-keys
  "of" 'yafolding-toggle-element
  )
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(debug-msg "terminal ...")
;; term shortcuts
;; (add-to-list 'term-mode-hook
;;              (lambda ()
;;                     (define-key term-raw-map (kbd "C-y") 'term-paste)))
;; http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/
(add-hook 'term-mode-hook
          (lambda ()
            (setq term-buffer-maximum-size 10000)
            (setq show-trailing-whitespace nil)
            ;; (autopair-mode -1)
            ;; (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
            ;; (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
            ;; (define-key term-raw-map (kbd "C-y") 'term-paste)
            ))

;; (global-set-key (kbd "M-O") 'multi-term)

;; (global-set-key (kbd "C-c C-j") 'term-line-mode)

;; http://paralambda.org/2012/07/02/using-gnu-emacs-as-a-terminal-emulator/
;; (setq term-bind-key-alist
;;       (list
;;        (cons "C-c C-c" 'term-interrupt-subjob)
;;        (cons "C-p" 'previous-line)
;;        (cons "C-n" 'next-line)
;;        (cons "M-f" 'term-send-forward-word)
;;        (cons "M-b" 'term-send-backward-word)
;;        (cons "C-c C-j" 'term-line-mode)
;;        (cons "C-c C-k" 'term-char-mode)
;;        (cons "M-DEL" 'term-send-backward-kill-word)
;;        (cons "M-d" 'term-send-forward-kill-word)
;;        (cons "<C-left>" 'term-send-backward-word)
;;        (cons "<C-right>" 'term-send-forward-word)
;;        ;; (cons "C-r" 'term-send-reverse-search-history)
;;        (cons "M-p" 'term-send-raw-meta)
;;        (cons "M-y" 'term-send-raw-meta)
;;        (cons "C-y" 'term-send-raw)
;;        ))

(setq multi-term-program "/usr/bin/zsh")

#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** Trash
#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
#+END_SRC
** Slack
#+BEGIN_SRC emacs-lisp :tangle no
;; TODO client-id/secret not coming across
;; (slack-register-team
;;   :default t
;;   :name "thetradedesk"
;;   :client-id (getenv "SLACK_CLIENT")
;;   :client-secret (getenv "SLACK_SECRET")
;;   :token (getenv "SLACK_SECRET")
;;   :subscribed-channels '(general slackbot))

;; ;; (add-to-list 'alert-user-configuration
;; ;;   '(((:category . "slack")) ignore nil))

;; ;; see http://endlessparentheses.com/keep-your-slack-distractions-under-control-with-emacs.html
;; ;; and http://endlessparentheses.com/mold-slack-entirely-to-your-liking-with-emacs.html

;; (add-hook 'slack-mode-hook #'emojify-mode)

;; ;;     getting error about sybol's value as variable is void
;; ;; (add-to-list
;; ;;   'alert-user-configuration
;; ;;   '(((:title . "\\(dev-aerospike\\|dev-aerospike-trn\\)")
;; ;;       (:category . "slack"))
;; ;;      libnotify nil))

;; ;; (add-to-list
;; ;;   'alert-user-configuration
;; ;;   '(((:message . "@brian\\|Brian")
;; ;;       (:title . "\\(okchannel\\|sosochannel\\)")
;; ;;       (:category . "slack"))
;; ;;      libnotify nil))
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-1") 'select-window-1)
(global-set-key (kbd "M-2") 'select-window-2)
(global-set-key (kbd "M-3") 'select-window-3)
(global-set-key (kbd "M-4") 'select-window-4)
(global-set-key (kbd "M-5") 'select-window-5)
(global-set-key (kbd "M-6") 'select-window-6)
(global-set-key (kbd "M-7") 'select-window-7)
(global-set-key (kbd "M-8") 'select-window-8)
(global-set-key (kbd "M-9") 'select-window-9)

(global-set-key (kbd "M-l") 'evil-window-next)
(global-set-key (kbd "M-h") 'evil-window-prev)
(global-unset-key (kbd "M-j"))
(global-set-key (kbd "M-j") 'evil-window-next)
(global-set-key (kbd "M-k") 'evil-window-prev)

;; (define-key auto-highlight-symbol-mode-major-mode (kbd "M--") nil)
;; (local-unset-key "M--")
;; (global-unset-key (kbd "M--"))
;; (define-key minor-mode-map (kbd "M--") 'split-window-below-and-focus)
;; (define-key minor-mode-map (kbd "M-_") 'split-window-below-and-focus)
;; (global-set-key (kbd "M--") 'split-window-below-and-focus)
;; (local-set-key (kbd "M--") 'split-window-below-and-focus)
;; (global-set-key (kbd "M-_") 'split-window-below-and-focus)
;; (global-set-key (kbd "M-_") 'split-window-vertically)
;; (local-unset-key (kbd "M--"))
;; (local-unset-key "M--")
;; (local-unset-key "\M--")
;; (global-unset-key (kbd "M--"))
(global-set-key (kbd "M--") 'split-window-below-and-focus)
(global-set-key (kbd "M-\\") 'split-window-right-and-focus)
;; (global-set-key (kbd "M-n") 'split-window-right-and-focus)
(define-key (current-global-map) [remap ahs-back-to-start] 'split-window-below-and-focus)

;; these are M-left and M-right. These interfere with org mode
;; (define-key (current-global-map) [remap ahs-forward] 'evil-window-decrease-width)
;; (define-key (current-global-map) [remap ahs-backward] 'evil-window-increase-width)

;; (global-unset-key (kbd "M-<left>"))
;; (global-unset-key "\M-left")
;; (global-unset-key "\M-right")
;; (global-set-key (kbd "M-C-k") 'evil-window-decrease-height)
;; (global-set-key (kbd "M-C-j") 'evil-window-increase-height)
;; (global-set-key (kbd "M-C-h") 'evil-window-decrease-width)
;; (global-set-key (kbd "M-C-l") 'evil-window-increase-width)

(global-set-key (kbd "C-M-=") 'text-scale-increase)
(global-set-key (kbd "C-M--") 'text-scale-decrease)
;; (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
;; (global-set-key (kbd "C-M--") 'default-text-scale-decrease)

#+END_SRC
** All done
#+BEGIN_SRC emacs-lisp
(debug-msg "all done ...")
#+END_SRC


** Gnuplot test
| a |  b |  c |
| 1 |  3 | 99 |
| 2 | 11 |  4 |
| 5 |  3 | 19 |
