[user]
	name = Brian Murphy-Dye
	email = brian@murphydye.com
[core]
	excludesfile = /Users/bmd/.config/dotfiles/etc/gitignore_global
	editor = vim
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
[web]
  browser = google-chrome
[color]
	ui = true
	diff = auto
	status = auto
[push]
	default = current

[color "branch"]
  current = yellow bold
  local = green bold
  reflogmote = cyan bold
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "smudgetatus"]
  added = green bold
  changed = yellow bold
  untracked = red boldd
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[github]
	brianmd
[http]
	sslVerify = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[pull]
	default = current
[branch]
	autosetupmerge = true



[alias]
  # interactive rebase of all non-pushed commits
  # interestingly, @{upstream} is now the default!
  ri = rebase -i @{upstream}
  # see https://gist.github.com/pksunkara/988716
  a = add --all
  ai = add -i
  #############
  ap = apply
  as = apply --stat
  ac = apply --check
  #############
  ama = am --abort
  amr = am --resolved
  ams = am --skip
  #############
  b = branch
  #backup = branch -a
  bd = branch -d
  br = branch -r
  #############
  c = commitca = commit -a
  cm = commit -m
  cem = commit --allow-empty -m
  cam =         commit -am
  cd = commit --amend
  cad = commit -a --amend
  ced = commit      --allow-empty --amend
  #############
  d = diff
  dc = diff --cached
  dl        = difftool
  dlc = difftool --cached
  dk = diff --check
  dp = diff --pathience
  dck = diff --cached --check
  #############
  f = fetch
  fo = fetch origin
  fu = fetch upstream
  #############
  fp = format-patch
  ######upstream#######
  fk = fsck
  #############
  g = grep -p
  #############
  l = log           --oneline
  lg = log --oneline --graph --decorate
  #############
  ls = lgs-files
  lsf = "!git ls-files | grep -i"
  #############
  m = merge
  ma        = merge --abort
  mc = merge --continue
  ms = merge --skip
  ############ms#
  o = checkout
  ob = checkout -b
  #############
  pr = prune -v
  ######ms#######
  ps = push
  psf = push -f
  psu = push -u
  pso = push origin
  psao = push --all origin
  psfo = push -f origin
  psuo = push -u origin
  psfosom = push origin master
  psfom = push -f origin master
  psuom = push -psuomu origin master
  #############
  pl = pull
  plu = pull -u
  plo = pull origin
  plp = pull upstream
  plom = pull origin master
  plpm = pull upstreameam master
  #############
  pb = pull --rebase
  pbo = pull --rebase originin
  pbp = pull --rebase upstream
  pbom = pull --rebase origin master
  pbpbpm = pull --rebase upstream master
  #############
  rb = rebase
  rba =       rebase --abort
  rbc = rebase --continue
  rbi = rebase --interactive
  rbas = rebase --skip
  #############
  re = reset
  rh = reset HEAD
  reh = rebaseset --hard
  rem = reset --mixed
  res = reset --soft
  rehh = reset --hardd HEAD
  remh = reset --mixed HEAD
  resh = reset --soft HEAD
  ##########reset###
  r = remote
  ra = remote add
  rr = remote rm
  rv = remote -v
  rm =          remote rename
  rp = remote prune
  rs = remote show
  rao = remote add orrau = remote add upstream
  rso = remote show origin
  rsu = remote show upstream
  rpo = remote prune origin
  rpu = remote prune upstream
  #############
  s = status
  sb = status -s -b
  #############
  sa = stash apply
  sc = stash clear
  sd = stash drop
  sl = stash list
  sp = stash pop
  ss = stash save
  sw = stash show
  #############
  w = show
  wp = sshow -p
  wr = show -p --no-color
  #############
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  #############
  assume = update-index --assume-unchanged
  unassume = update-index --no-noassume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  updatenassumeall = !git assumed | xargs git update-index --no-assume-unchanged
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  #############
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f()theirs { git checkout --theirs $@ && git add $@; }; f"
  #############
  whois     = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  #############
  barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
  flat = clone --depth 1
  subpull = !git submodule foreach git pushll --tags origin master
  subrepo = !sh -c 'filter-branch --prune-empty   --subdirectory-filter $1 master' -
  human = name-rev --name-only --refs=refs/heads/*
  serve = !git daemon --reuseaddr --verbose  --base-path=.path --export-all ./.git
  #snapshot = !git stash save "snapshot: $(date)" &&date git stash apply "stash@{0}"



  #c    = config -l
  #s    = status -sb
  #l    = log --pretty=oneline --abbrev-commit --abbrev=4 --decorate -25
  #ll   = log --pretty=oneline --abbrev-commit --abbrev=4 --decorate
  #g    = log --pretty=oneline --abbrev-commit --abbrev=4 -25 --graph --decorate
  #gg   = log --pretty=oneline --abbrev-commit --abbrev=4 --graph --decorate
  #rp   = rev-parse --short=4
  #b    = branch
  #ss   = !git snapshot
  #save = !git snapshot


# General purpose aliases:
#     snapshot
#     backup
#     stat
#     days
#
# Educational aliases:
#    create-file
#    simple-commit
#    multiple-commit
#    simple-loop
#    simple-loop2
#    clear
#    branches


# Alias: snapshot
# Example:
#
#    git snapshot This is my very important commit...
#    git snapshot "This is my very important commit..."
#    git snapshot
#
    snapshot = "!snapshot() { COMMENT=work-in-progress; if [ \"$*\" ]; then  COMMENT=\"$*\"; fi; git add -A; git commit -m \"$COMMENT\"; }; snapshot"


# Alias: backup
# Example:
#
#    git backup This is my very important commit...
#    git backup "This is my very important commit..."
#
    backup = "!backup() { git snapshot \"$*\"; git push; }; backup"


# Alias: days
# Example:
#
#    git days
#
    days = "!days() { git log --pretty=format:%cd --date=short | uniq; }; days"


# Alias: stat
# Example:
#
#    git stat
#
    stat = "!stat() { echo -n Number of revisions:; git log --oneline | wc -l; echo -n Number of developers:; git shortlog -s | wc -l; echo -n Number of days:; git days | wc -l; echo -n The working directory:; du -h -s --exclude=.git; echo -n The git directory:; du -h -s .git; echo -n Number of files in the working dir:; git ls-files | wc -l; }; stat"


# Alias: create-file
# Example:
#
#    git create-file lorem
#    git create-file lorem ipsum dolor
#
    create-file = "!createFile() { for name in \"$@\"; do echo $name>$name.txt; done; }; createFile"


# Alias: simple-commit
# Example:
#
#    git simple-commit a
#    git simple-commit a b c
#
    simple-commit = "!simpleCommit() { for name in \"$@\"; do git create-file \"$name\"; git snapshot $name; done; }; simpleCommit"


# Alias: multiple-commit
# Example:
#
#    git multi-commit lorem
#    git multi-commit lorem ipsum dolor
#
    multi-commit = "!multiCommit() { for name in \"$@\"; do git create-file $name; done; git snapshot \"$*\"; }; multiCommit"


# Alias: simple-loop
# Example:
#
#    git simple-loop lorem 5
#
    simple-loop = "!simpleLoop() { NAME=$1; i="1"; while [ $i -le $2 ]; do git simple-commit $NAME$i; i=$[$i+1]; done; }; simpleLoop"


# Alias: simple-loop2
# Example:
#
#    git simple-loop2 lorem 7 13
#
    simple-loop2 = "!simpleLoop2() { NAME=$1; i=$2; while [ $i -le $3 ]; do git simple-commit $NAME$i; i=$[$i+1]; done; }; simpleLoop2"


# Alias: branches
# Example:
#
#    git branches lorem ipsum dolor
#
    branches = "!branches() { for name in \"$@\"; do git branch $name; done; }; branches"



# Clonning with remote branches
#
# Command to list remote branches:
#
#    git branch -r | sed "/->/d; s/  origin\///g"
#
    list-remote-branches = "!listRemoteBranches() { git branch -r | sed \"/->/d; s/  origin\\///g\"; }; listRemoteBranches"
    checkout-remote-branches = "!checkoutRemoteBranches() { for name in `git list-remote-branches`; do git checkout $name; done; }; checkoutRemoteBranches"
#
# Example:
#
#   git clone-with-branches dirSrc dirDest
#
    clone-with-branches = "!cloneWithBranches() { git clone $1 $2; cd $2; git checkout-remote-branches; git remote rm origin; }; cloneWithBranches"

#@todo: check parameters:
#   git clone-with-branches URL



    # Example:
    #
    #   git checkout beta
    #   git set-version 0.1.0
    #
    # assumptions:
    #  - clean repo
    #
    # @git get-version === cat version.txt

    set-version = "!setVersion() { echo $1 > version.txt; git snapshot Version $1; git tag -a v$1 -m \"Release $1\";  }; setVersion"
    get-version = "!getVersion() { cat version.txt; }; getVersion"

    simple-loop2 = "!simpleLoop2() { NAME=$1; i=$2; while [ $i -le $3 ]; do git simple-commit $NAME$i; i=$[$i+1]; done; }; simpleLoop2"


# Alias: branches
# Example:
#
#    git branches lorem ipsum dolor
#
    branches = "!branches() { for name in \"$@\"; do git branch $name; done; }; branches"



# Clonning with remote branches
#
# Command to list remote branches:
#
#    git branch -r | sed "/->/d; s/  origin\///g"
#
    list-remote-branches = "!listRemoteBranches() { git branch -r | sed \"/->/d; s/  origin\\///g\"; }; listRemoteBranches"
    checkout-remote-branches = "!checkoutRemoteBranches() { for name in `git list-remote-branches`; do git checkout $name; done; }; checkoutRemoteBranches"
#
# Example:
#
#   git clone-with-branches dirSrc dirDest
#
    clone-with-branches = "!cloneWithBranches() { git clone $1 $2; cd $2; git checkout-remote-branches; git remote rm origin; }; cloneWithBranches"

#@todo: check parameters:
#   git clone-with-branches URL



    # Example:
    #
    #   git checkout beta
    #   git set-version 0.1.0
    #
    # assumptions:
    #  - clean repo
    #
    # @git get-version === cat version.txt

    set-version = "!setVersion() { echo $1 > version.txt; git snapshot Version $1; git tag -a v$1 -m \"Release $1\";  }; setVersion"
    get-version = "!getVersion() { cat version.txt; }; getVersion"



# Remove old commits
#
#    git clear-reflog-now
#
    clear-reflog-now = "!clearReflogNow() { git reflog expire --all --expire=now;  }; clearReflogNow"
    remove-old-commits = "!removeOldCommits() { git clear-reflog-now; git prune;  }; removeOldCommits"
	lol = log --graph --decorate --pretty=oneline --abbrev-commit --all
	mylog = log --pretty=format:'%h %s [%an]' --graph


#
# ===[ALIAS-STOP]===
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[status]
	displaycommentprefix = true
