# found at https://github.com/rafBM/dotfiles/blob/master/.zshrc

alias gti="git" # shame
alias g="git"
# usage: gittrack feature/punchout
gittrack() "git checkout -t origin/$@"
alias g1="git log --abbrev-commit --abbrev=4 --pretty=oneline"
alias glog="git log --oneline --decorate --branches --remotes --tags -n 70"
alias gloga="glog --pretty=format:'%C(yellow)%h%C(reset)%C(bold red)%d%C(reset) %s %C(green)(%cr) %C(cyan)<%an>%C(reset)' | ruby -e 'puts STDIN.read.gsub(%(<#{%x(git config user.name).chomp}>), %())'"
alias gstatus="git status -sbu"
alias gdiff="git diff"
alias gadd="git add -p"
alias gb="git branch -vv"
alias gf="git flow"
alias feature="git flow feature"
alias release="git flow release"

alias gc="git commit -v"
alias gcommit="git commit -v"
alias gcommita="git commit -va"

alias gclean="git clean -fd"
alias gch="git checkout"
# pip install git+https://github.com/jeffkaufman/icdiff.git
icdiff_loc=$(which icdiff)
if [ -x $icdiff_loc ]; then
  alias gd="git difftool --extcmd icdiff"
else
  alias gd="git diff --color"
fi
alias gd1="git diff --color"
alias gemacs="git difftool --tool=ediffclient master --"
alias gdr="git diff --color develop remotes/origin/develop"
alias gds="git diff --stat --color"
alias gdrs="git diff --stat --color develop remotes/origin/develop"

alias gmerge="git merge --no-ff"
alias gp="git pull --rebase"
alias gpull="git pull --rebase"
alias gpush="git push"
alias gpick="git cherry-pick"
alias gpop="git stash pop"
alias grebase="git rebase -i HEAD~20"
alias grs="git status -s -u no"
alias gs="git status -s"
alias gsl="git stash list"
alias gstash="git stash save -u"
#gss() { git stash show -u stash@{$1} }
#gsp() { git stash pop stash@{$1} }
#gsd() { git stash drop stash@{$1} }
alias gsub="git submodule"
alias gsuba="git submodule add"
alias gsubi="git submodule init"
alias gsubu="git submodule update"
##alias grs="git fetch ; git status -s -u no"

# Colors vary depending on time lapsed.

#ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT="%{$fg[green]%}"
#ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM="%{$fg[yellow]%}"
#ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG="%{$fg[red]%}"
#ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL="%{$fg[cyan]%}"
 
#Customized git status, oh-my-zsh currently does not allow render dirty status before branch
git_custom_status() {
  local cb=$(current_branch)
  if [ -n "$cb" ]; then
    echo "$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_PREFIX$(current_branch)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}
 
# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
function git_time_since_commit() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        # Only proceed if there is actually a commit.
        if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
            # Get the last commit.
            last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`
            now=`date +%s`
            seconds_since_last_commit=$((now-last_commit))
 
            # Totals
            MINUTES=$((seconds_since_last_commit / 60))
            HOURS=$((seconds_since_last_commit/3600))
 
            # Sub-hours and sub-minutes
            DAYS=$((seconds_since_last_commit / 86400))
            SUB_HOURS=$((HOURS % 24))
            SUB_MINUTES=$((MINUTES % 60))
 
            if [[ -n $(git status -s 2> /dev/null) ]]; then
                if [ "$MINUTES" -gt 30 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
                elif [ "$MINUTES" -gt 10 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
                else
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
                fi
            else
                COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            fi
 
            if [ "$HOURS" -gt 24 ]; then
                echo "($COLOR${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m%{$reset_color%})"
            elif [ "$MINUTES" -gt 60 ]; then
                echo "($COLOR${HOURS}h${SUB_MINUTES}m%{$reset_color%})"
            else
                echo "($COLOR${MINUTES}m%{$reset_color%})"
            fi
        fi
    fi
}



# Just add $(git_time_since_commit) to your ZSH PROMPT and you're set
 
 
#ZSH_THEME_GIT_PROMPT_PREFIX="%{$reset_color%}%{$fg[green]%}["
#ZSH_THEME_GIT_PROMPT_SUFFIX="]%{$reset_color%}"
#ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}*%{$reset_color%}"
#ZSH_THEME_GIT_PROMPT_CLEAN=""

